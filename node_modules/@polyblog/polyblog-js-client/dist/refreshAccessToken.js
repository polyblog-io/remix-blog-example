"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = refreshAccessToken;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _b64Lite = require("b64-lite");

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var _accessToken = require("./accessToken");

var _refreshToken = require("./refreshToken");

var _getPolyblogUrl = _interopRequireDefault(require("./getPolyblogUrl"));

function refreshAccessToken() {
  return _refreshAccessToken.apply(this, arguments);
}

function _refreshAccessToken() {
  _refreshAccessToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var accessToken, refreshToken, url, result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            accessToken = (0, _accessToken.getAccessToken)();

            if (!(accessToken && (0, _accessToken.isAccessTokenExpired)())) {
              _context.next = 16;
              break;
            }

            if (!(0, _refreshToken.isRefreshTokenExpired)()) {
              _context.next = 7;
              break;
            }

            if (typeof window !== 'undefined') {
              window.open('/logout');
            }

            throw new Error('refresh token has expired');

          case 7:
            refreshToken = (0, _refreshToken.getRefreshToken)();
            url = (0, _getPolyblogUrl["default"])() + '/api/refresh-access-token';
            _context.next = 11;
            return (0, _isomorphicFetch["default"])(url, {
              method: 'POST',
              headers: {
                Authorization: 'Token ' + (0, _b64Lite.btoa)(refreshToken)
              }
            }).then(function (response) {
              if (!response.ok) {
                return response.json().then(function (error) {
                  throw error;
                });
              } else {
                return response.json();
              }
            })["catch"](console.log);

          case 11:
            result = _context.sent;
            accessToken = result.accessToken;
            refreshToken = result.refreshToken;
            (0, _accessToken.setAccessToken)(accessToken);
            (0, _refreshToken.setRefreshToken)(refreshToken);

          case 16:
            return _context.abrupt("return", accessToken);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _refreshAccessToken.apply(this, arguments);
}