"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = http;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _b64Lite = require("b64-lite");

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var _failure = _interopRequireDefault(require("./failure"));

var _getPolyblogUrl = _interopRequireDefault(require("./getPolyblogUrl"));

var _httpWithoutHeaders = _interopRequireDefault(require("./httpWithoutHeaders"));

var _refreshAccessToken = _interopRequireDefault(require("./refreshAccessToken"));

function http(_x, _x2) {
  return _http.apply(this, arguments);
}

function _http() {
  _http = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(config, customFailure) {
    var accessToken;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _refreshAccessToken["default"])();

          case 2:
            accessToken = _context.sent;

            if (!config.headers) {
              config.headers = {};
            }

            config.headers.Accept = config.headers.Accept || 'application/json';
            config.headers['Content-Type'] = config.headers['Content-Type'] || 'application/json';
            config.headers.Authorization = config.headers.Authorization || 'Token ' + (0, _b64Lite.btoa)(accessToken || '');
            return _context.abrupt("return", (0, _isomorphicFetch["default"])((0, _getPolyblogUrl["default"])() + '/api/' + config.url, {
              method: config.method,
              headers: config.headers,
              body: JSON.stringify(config.body)
            }).then(function (response) {
              if (!response.ok) {
                if (response.url.startsWith('https://s3.amazonaws.com')) {
                  return (0, _httpWithoutHeaders["default"])(response.url);
                } else {
                  return response.json().then(function () {
                    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                    if (!error.status) {
                      error.status = response.status;
                    }

                    if (!error.message) {
                      error.message = response.statusText;
                    }

                    throw error;
                  });
                }
              } else {
                return response.json();
              }
            })["catch"](customFailure || _failure["default"]));

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _http.apply(this, arguments);
}